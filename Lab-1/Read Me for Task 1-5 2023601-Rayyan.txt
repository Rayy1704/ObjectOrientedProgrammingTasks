			Read Me for Task 1-5 2023601-Rayyan Hassan Salman-Section.H-CS


                                       Task 1:Kitechen Management
Code Description:
Code has structures for chef and order and an enum type for cousines.It allows adding chefs and orders, and then assigns orders to available chefs based on their specialization.code implements function pointers for maximum effeciency.

Thought Process:
Implemented the use of structures for chefs and orders to organize data efficiently in a well mannared way.
Left an option of dynamic memory allocation in case if menu needs to be added to allow orders to be repeatedly added.
Implemented functions for adding chefs and orders, as well as assigning orders to chefs.
Used enumeration to represent different cuisines and improve code readability.
Used nested loops,break statement and if statements to assign orders to chefs.
Variables:
totalChefs: Integer variable storing the total number of chefs.
chefs: Pointer to an array of chef structures, representing the list of chefs.
totalOrders: Integer variable storing the total number of orders.
orders: Pointer to an array of order structures, representing the list of orders.

Functions:

addChef:Adds Chef to list and increments number of chefs
Parameters: totalChefs, chefs.
Variables: newChefs, specialisationNum.

addOrder:Adds Order to list and increments number of Orders
Parameters: totalOrders, orders.
Variables: newOrders, orderNum.

assignOrders:Assigns chefs to orders based on specialisation and order type.
Parameters: totalOrders, orders, totalChefs, chefs.
Variables: assigned.

				Task-2:Employees in Structures
Code Description:
Program contains Employee struct containing employee details. It can add employees, display employee details using ID, and calculate total salary of all employees.

Thought Process:
Used a structure to organize employee details.
Left an option of dynamic memory allocation in case if menu needs to be added to allow employees to be repeatedly added.
Implemented functions for adding employees, displaying details based on ID, and calculating total salary.
Utilized function pointers to simplify code structure.
Utilized a loop to add multiple employees and search for specific employee details.

Variables:
emp: Pointer to an array of employee structures, representing the list of employees.
numEmployees: Integer variable storing the total number of employees.
addNum: Integer variable storing the number of employees to be added.
searchID: Integer variable storing the ID of the employee to be searched.
sNum: Integer variable storing the number of employees to be searched.
searchDetails: Function pointer to a function for displaying employee details.
totalSalary: Function pointer to a function for calculating the total salary.
Functions:

addEmployee:Adds a new employee to the list and updates the total number of employees.
Parameters: total, emp, i.
Variables: newEmp.

displayEmployee:Displays details of an employee based on the provided ID.
Parameters: searchID, total, emp.
Variables: present.

calcTotal:Calculates the total salary of all employees.
Parameters: total, emp.
Variables: sum.

				Task 2B:Employees In Unions

Code Description:
This program shows how all the members of a union share the same memory location and so thus only one of them can be stored at a time and the solution to the problem.

Thought Process:
this was fairly easy to make as we have covered this is cs112 oop theory class.I also deeply practiced this concept and came to the conclusion that is another element e.g name was to be in this union ,its output would have displayed the same thing as of the latest input “Marketing”.

Variables:
union EmployeeDetails.
john: Union variable named john representing employee details.
Members: salary, department.

Functions:
main:Demonstrates the concept of unions by assigning values to john.salary and john.department and displaying the results.

			        Task 3: Students & Structures
Code Description:
Following program consists of a struct student and an array of 11 students.It starts off with the names of students being generated by combining 2 characters and their roll number being the order of their element ,e.g element 0 is roll number 1 .Their ages are randomly generated between 11 and 14 using rand function and modulus .
Function are applied to display only those with evem roll numbers and only those of age 14.
Program also contains the feature to search for a student using their role number in class to be given details .

Thought Process:
I had to think of something better than having the user input the names as that would be a hassle so I made the program to generate the names using the 2 characters that are generated based on their element number.this saves a lot of time .Roll numbers are generated on base of element number as well and ages are generated randomly.
The 3 functions contain nothing complex ,just the basics of c++ that we learned and applied ins CS101 in the first semester .

Variables:

students: Array of student structures, representing the list of students.
totalNum: Integer variable storing the total number of students.

Functions:

print14:Usage:Prints names of students with age 14.
Parameters: students, totalNum.

printEven:Prints names of students with even roll numbers.
Parameters: students, totalNum.

searchDisplay:Searches for a student based on roll number and displays their details.
Parameters: students, totalNum.

					Task-4 : Raise in salary
Code Description:
Program generated names of 10 employees based on their element number is the array and a random initial salary between 100 and 999.Program uses the rand() function and checks if the random number is even or add and based on that assigns working hours to every employee with highest chances of 8 hours and lower chances of 10 or 12 and above.Then based on the working hours each employee is given a raise .
Program gives the neat output of all the data present .

Thought Process:
This program was pretty similar to the previous one and the name generation methode is the same .I decide for the initial pays all to be 3 digits and between 100 and 999 because it seemed like a decent amount ,I used the even off rand() mechanism because its more common for employees to have 8 hour days than 10 or more than 12 hour days,although the program can generate a 24 hour work day.Then depending on the data calculations are made and output.

Variables:
Employees: Array of employee structures, representing the list of employees.

Functions:
main:Generates employee data, calculates new salaries based on work hours, and displays employee details.

				Task-5 :Libruary (Best and Most Well documented one)

Task-5
Details :
Task-5 contains a menu which is able to :
1.Display a book’s information using access number
2.Add a new book to the library, increasing quantity of the title.
3.Display all the books of a particular author
4.Display all the books of a particular title
5.Display the total number of books in the library
6.Issue a Book from the library, causing  the book to show up as issued and the title quantity to decrease by one.

Thought Process : 
Task-5 was the one which took the most amount of time and probably the trickiest one but yet again this could be solved using the structure concept and the concepts we learned last semester is CS-101;
I used do while loops to keep the menu going until exited.
Used if  and switch statements to control the flow of the program.
Used for loops to traverse the members of all the book elements in the library.
Implemented multiple functions .
Other concepts such as referencing,dynamic memory allocation and etc.

Variables:

books: Pointer to an array of book structures, representing the list of books.
totalBooks: Integer variable storing the total number of books.
choice: Integer variable storing the user's menu choice.

Functions:

menuDisplay:Displays the menu options and returns the user's choice.

displayInfo:Displays information about a specific book based on the access number.
Parameters: books, totalBooks.

addBook:Adds a new book to the library.
Parameters: books, totalBooks.

displayBooksOfAuther:Displays books of a specific author.
Parameters: books, totalBooks.

displayBooksOfTitle:Displays books of a specific title.
Parameters: books, totalBooks.

issueBook:Issues a book from the library, updating its status and quantity.

main:Controls the flow of the program, displaying the menu, and calling functions based on user choices.
Parameters: books, totalBooks.
Variables: books, totalBooks, choice.